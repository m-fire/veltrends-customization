POST http://{{host}}:{{port}}/api/auth/register
Content-Type: application/json

{
	"username": "뇸뇸뇸-{{$randomInt}}",
	"password": "1"
}

> {%
var status = 201;
client.test("회원등록-성공", function() {
  client.log("\n");
  client.log("response.body:\t" + JSON.stringify(response.body))
  client.log("\n");
  client.assert(response.status === status, "expected status : " + status + " - actual (" + response.status + ")")
})
%}

### 회원등록 성공

POST http://{{host}}:{{port}}/api/auth/register
Content-Type: application/json

{
	"username": "뇸뇸뇸",
	"password": "1"
}

> {%
var status = 409;
client.test("회원등록-실패", function() {
  client.log("\n");
  client.log("response.body:\t" + JSON.stringify(response.body))
  client.log("\n");
  client.assert(response.status === status, "expected status : " + status + " - actual (" + response.status + ")")
})
%}

### 회원등록 실패

POST http://{{host}}:{{port}}/api/auth/login
Content-Type: application/json

{
	"username": "뇸뇸뇸",
	"password": "1"
}

> {%
var status = 200;
client.test("로그인 성공, 토큰저장", function() {
  client.log("\n");
  client.log("response.body:\t" + JSON.stringify(response.body))
  client.log("\n");

  client.global.set("user.id", response.body.user.id);
  client.global.set("user.username", response.body.user.username);
  client.global.set("access_token", response.body.tokens.accessToken);
  client.global.set("refresh_token", response.body.tokens.refreshToken);

  client.log("client.global 속성목록\n");
  client.log("✔ global::user.id:\t" + client.global.get("user.id"));
  client.log("✔ global::user.username:\t" + client.global.get("user.username"));
  client.log("✔ global::access_token:\t" + client.global.get("access_token"));
  client.log("✔ global::refresh_token:\t" + client.global.get("refresh_token"));

  client.assert(response.status === status, "expected status : " + status + " - actual (" + response.status + ")")
})
%}

### 로그인 성공

POST http://{{host}}:{{port}}/api/auth/login
Content-Type: application/json

{
  "username": "없는사용자명",
  "password": "없음"
}

> {%
var status = 401;
client.test("로그인 실패", function() {
  client.log("\n");
  client.log("response.body:\t" + JSON.stringify(response.body))
  client.log("\n");
  client.assert(response.status === status, "expected status : " + status + " - actual (" + response.status + ")")
})
%}

### 로그인 실패


POST http://{{host}}:{{port}}/api/auth/logout
Content-Type: application/json

{
  "userId": {{user.id}}
}

> {%
var status = 202;
client.test("로그아웃", function() {
  if (response.status === status) {
    client.log("정상적으로 로그아웃 되었습니다.\n");
//    client.global.clear("user.id");
//    client.global.clear("user.username");
//    client.global.clear("access_token");
//    client.global.clear("refresh_token");
  } else
    client.log("로그아웃 되지 않았습니다.\n");

  client.global.clear("user.id");
  client.global.clear("user.username");
  client.global.clear("access_token");
  client.global.clear("refresh_token");

  client.log("\n");
  client.log("response.body:\t" + JSON.stringify(response.body))
  client.log("\n");
  client.log("client.global 속성목록\n");
  client.log("✔ global::user.id:\t" + client.global.get("user.id"));
  client.log("✔ global::user.username:\t" + client.global.get("user.username"));
  client.log("✔ global::access_token:\t" + client.global.get("access_token"));
  client.log("✔ global::refresh_token:\t" + client.global.get("refresh_token"));
  client.assert(response.status === status, "Response status is not " + status + "(" + response.status + ")")
})
%}

POST http://{{host}}:{{port}}/api/auth/logout
Content-Type: application/json

{
  "userId": {{user.id}}
}

> {%
var status = 202;
client.test("로그아웃", function() {
  if (response.status === status) {
    client.log("정상적으로 로그아웃 되었습니다.\n");
  } else
    client.log("로그아웃 되지 않았습니다.\n");

  client.global.clear("user.id");
  client.global.clear("user.username");
  client.global.clear("access_token");
  client.global.clear("refresh_token");

  client.log("\n");
  client.log("response.body:\t" + JSON.stringify(response.body))
  client.log("\n");
  client.log("client.global 속성목록\n");
  client.log("✔ global::user.id:\t" + client.global.get("user.id"));
  client.log("✔ global::user.username:\t" + client.global.get("user.username"));
  client.log("✔ global::access_token:\t" + client.global.get("access_token"));
  client.log("✔ global::refresh_token:\t" + client.global.get("refresh_token"));
  client.assert(response.status === status, "expected status : " + status + " - actual (" + response.status + ")")
})
%}

### 로그아웃

#GET http://{{host}}:{{port}}/api/auth/register/1
#Accept: application/json
#
#> /DEV/LIB/jetbrains-http-client/tests/assertion/found-302.js
#
#### 회원조회 - 성공
#
#GET http://{{host}}:{{port}}/api/users/2
#Accept: application/json
#
#> /DEV/LIB/jetbrains-http-client/tests/assertion/found-302.js
#
#### 회원조회 - 성공
#
#GET http://{{host}}:{{port}}/api/users/-2
#Accept: application/json
#
#> /DEV/LIB/jetbrains-http-client/tests/assertion/forbidden-400.js
#
#### 회원조회 - 실패
#
#PUT http://{{host}}:{{port}}/api/users
#Content-Type: application/json
#
#< ./http/update-category.json
#
#> /DEV/LIB/jetbrains-http-client/tests/assertion/accept-202.js
#
#### 회원 업데이트
#
#DELETE http://{{host}}:{{port}}/api/users/2
#Content-Type: application/json
#
#> /DEV/LIB/jetbrains-http-client/tests/assertion/accept-202.js
#
#### 회원 삭제 성공
#
#DELETE http://{{host}}:{{port}}/api/users/2
#Content-Type: application/json
#
#> /DEV/LIB/jetbrains-http-client/tests/assertion/forbidden-400.js
#
#### 삭제된 회원 재삭제 실패