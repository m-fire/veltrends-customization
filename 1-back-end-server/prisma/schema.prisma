// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// 이 파일의 Force Formatting 지원은 VSCode-Prisma 플러그인 을 통해 도움을 받는다.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // "postgresql"
  url      = "file:./dev.db" // env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique
  passwordHash String
  createdAt    DateTime @default(now())

  Item              Item[]
  Token             Token[]
  comments          Comment[] @relation("user")
  mentionedComments Comment[] @relation("mentionUser")
}

model Token {
  id              Int      @id @default(autoincrement())
  rotationCounter Int      @default(1)
  blocked         Boolean  @default(false)
  createdAt       DateTime @default(now())
  userId          Int

  user User @relation(fields: [userId], references: [id])
}

model Item {
  id          Int      @id @default(autoincrement())
  title       String
  body        String
  author      String   @default("")
  link        String?
  thumbnail   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      Int
  publisherId Int

  itemStatus ItemStatus?
  tags       Tag[]
  itemsTags  ItemsTags[]
  comments   Comment[]
  itemLikes  ItemLike[]

  publisher Publisher @relation(fields: [publisherId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([createdAt(sort: Desc)])
}

model Publisher {
  id      Int     @id @default(autoincrement())
  name    String
  favicon String?
  domain  String  @unique

  items Item[]
}

model Tag {
  id     Int    @id @default(autoincrement())
  name   String @unique
  itemId Int?

  itemsTags ItemsTags[]

  Item Item? @relation(fields: [itemId], references: [id])
}

model ItemsTags {
  itemId Int
  tagId  Int

  item Item @relation(fields: [itemId], references: [id])
  tag  Tag  @relation(fields: [tagId], references: [id])

  @@id([itemId, tagId])
  @@index(tagId)
  @@index(itemId)
}

model TagRelation {
  id          Int @id @default(autoincrement())
  tagId       Int
  originTagId Int

  @@index(tagId)
  @@index(originTagId)
}

model ItemLike {
  id        Int      @id @default(autoincrement())
  itemId    Int
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@unique([itemId, userId])
  @@index(itemId)
}

model ItemStatus {
  id           Int      @id @default(autoincrement())
  likeCount    Int      @default(0)
  commentCount Int      @default(0)
  clickCount   Int      @default(0)
  score        Float    @default(0)
  updatedAt    DateTime @default(now()) @updatedAt
  itemId       Int      @unique

  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@index([score(sort: Desc), itemId(sort: Desc)])
  @@index([likeCount(sort: Desc), itemId(sort: Desc)])
}

model Comment {
  id              Int       @id @default(autoincrement())
  text            String
  likeCount       Int       @default(0)
  subcommentCount Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now()) @updatedAt
  deletedAt       DateTime?
  itemId          Int
  parentCommentId Int?
  userId          Int
  mentionUserId   Int?

  commentLikes CommentLike[]

  item        Item  @relation(fields: [itemId], references: [id], onDelete: Cascade)
  user        User  @relation("user", fields: [userId], references: [id], onDelete: Cascade)
  mentionUser User? @relation("mentionUser", fields: [mentionUserId], references: [id])

  @@index(deletedAt)
  @@index(createdAt)
  @@index(parentCommentId)
}

model CommentLike {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  userId    Int
  commentId Int

  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId])
  @@index(commentId)
}
