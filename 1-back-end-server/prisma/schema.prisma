// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// 이 파일의 Force Formatting 지원은 VSCode-Prisma 플러그인 을 통해 도움을 받는다.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // "postgresql"
  url      = "file:./dev.db" // env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique
  passwordHash String
  createdAt    DateTime @default(now())

  Item              Item[]
  Token             Token[]
  comments          Comment[] @relation("user")
  mentionedComments Comment[] @relation("mentionUser")
}

model Token {
  id              Int      @id @default(autoincrement())
  rotationCounter Int      @default(1)
  createdAt       DateTime @default(now())
  blocked         Boolean  @default(false)

  user            User     @relation(fields: [userId], references: [id])
  userId          Int
}

model Item {
  id        Int     @id @default(autoincrement())
  title     String
  body      String
  author    String  @default("")
  link      String?
  thumbnail String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  publisher   Publisher @relation(fields: [publisherId], references: [id], onDelete: Cascade)
  publisherId Int

  itemStatus ItemStatus?
  tags       Tag[]
  itemsTags  ItemsTags[]
  comments   Comment[]
  itemLikes  ItemLike[]

  publisher Publisher @relation(fields: [publisherId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id])

  @@index([createdAt(sort: Desc)])
}

model Publisher {
  id      Int     @id @default(autoincrement())
  name    String
  favicon String?
  domain  String  @unique

  items Item[]
}

model Tag {
  id        Int         @id @default(autoincrement())
  name      String      @unique

  item      Item?       @relation(fields: [itemId], references: [id])
  itemId    Int?
  itemsTags ItemsTags[]
}

model ItemsTags {
  item   Item @relation(fields: [itemId], references: [id])
  itemId Int
  tag    Tag  @relation(fields: [tagId], references: [id])
  tagId  Int

  @@id([itemId, tagId])
  @@index(tagId)
  @@index(itemId)
}

model TagRelation {
  id          Int @id @default(autoincrement())
  tagId       Int
  originTagId Int

  @@index(tagId)
  @@index(originTagId)
}

model ItemLike {
  id     Int @id @default(autoincrement())
  itemId Int
  userId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  item Item @relation(fields: [itemId], references: [id])

  @@unique([itemId, userId])
}

model ItemStatus {
  id            Int      @id @default(autoincrement())
  likes         Int      @default(0)
  clicks        Int      @default(0)
  score         Int      @default(0)
  commentsCount Int      @default(0)
  updatedAt     DateTime @default(now()) @updatedAt
  itemId        Int      @unique

  item Item @relation(fields: [itemId], references: [id])
}

model Comment {
  id              Int       @id @default(autoincrement())
  text            String
  likesCount      Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now()) @updatedAt
  deletedAt       DateTime?
  itemId          Int
  userId          Int
  parentCommentId Int
  mentionUserId   Int?

  commentLikes CommentLike[]

  item        Item  @relation(fields: [itemId], references: [id])
  user        User  @relation("user", fields: [userId], references: [id])
  mentionUser User? @relation("mentionUser", fields: [mentionUserId], references: [id])
}

model CommentLike {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  userId    Int
  commentId Int

  comment Comment @relation(fields: [commentId], references: [id])

  @@unique([commentId, userId])
}
