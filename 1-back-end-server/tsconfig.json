{
  "compilerOptions": {
    /* TODO: edit ref 1. https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c
                      2. https://github.com/sindresorhus/tsconfig/blob/main/tsconfig.json */

    /* Projects */
    // "incremental": true,                              /* Save .tsbuildinfo files to allow for incremental compilation of projects. */
    // "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* Specify the path to .tsbuildinfo incremental compilation file. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */
    // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
    // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */

    /* Language and Environment */
    "target": "ES2020",                                  /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
     "lib": [                                            /* Specify a set of bundled library declaration files that describe the target runtime environment. */
       "DOM",
       "DOM.Iterable",
       "ES2020"
     ],
//     "jsx": "react",                                /* Specify what JSX code is generated. */
    // "experimentalDecorators": true,                   /* Enable experimental support for TC39 stage 2 draft decorators. */
    // "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */
    // "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */
    // "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
    // "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */
    // "reactNamespace": "",                             /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */
    // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
//     "useDefineForClassFields": true,                  /* ECMAScript 표준 호환 클래스 필드 방출. */
     "moduleDetection": "force",                        /* Control what method is used to detect module-format JS files. */

    /* Modules */
    "module": "ES2020",                                /* 생성되는 모듈 코드를 지정합니다. */
    // "rootDir": "./",                                  /* Specify the root folder within your source files. */
     "moduleResolution": "Node",                       /* TypeScript가 주어진 모듈 지정자에서 파일을 찾는 방법을 지정합니다. */
    // "baseUrl": "./",                                  /* Specify the base directory to resolve non-relative module names. */
    // "paths": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */
    // "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
    // "typeRoots": [],                                  /* Specify multiple folders that act like './node_modules/@types'. */
    // "types": [],                                      /* Specify type package names to be included without being referenced in a source file. */
    // "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */
    // "moduleSuffixes": [],                             /* List of file name suffixes to search when resolving a module. */
     /* ESM은 아직 JSON 모듈을 지원하지 않습니다 */
//     "resolveJsonModule": false,                        /* .json 파일 가져오기 활성화. */
    // "noResolve": true,                                /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */

    /* JavaScript Support */
    // "allowJs": true,                                  /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */
    // "checkJs": true,                                  /* Enable error reporting in type-checked JavaScript files. */
    // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */

    /* Emit */
//     "declaration": true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
    // "declarationMap": true,                           /* Create sourcemaps for d.ts files. */
    // "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */
    // "sourceMap": true,                                /* Create source map files for emitted JavaScript files. */
    // "outFile": "./",                                  /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */
    // "outDir": "./",                                   /* Specify an output folder for all emitted files. */
    // "removeComments": true,                           /* Disable emitting comments. */
    // "noEmit": true,                                   /* Disable emitting files from a compilation. */
    // "importHelpers": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
    // "importsNotUsedAsValues": "remove",               /* Specify emit/checking behavior for imports that are only used for types. */
    // "downlevelIteration": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
    // "sourceRoot": "",                                 /* Specify the root path for debuggers to find the reference source code. */
    // "mapRoot": "",                                    /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSourceMap": true,                          /* Include sourcemap files inside the emitted JavaScript. */
    // "inlineSources": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */
    // "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
     "newLine": "lf",                                /* 줄 바꿈 문자 설정. */
    // "stripInternal": true,                            /* Disable emitting declarations that have '@internal' in their JSDoc comments. */
    // "noEmitHelpers": true,                            /* Disable generating custom helper functions like '__extends' in compiled output. */
//     "noEmitOnError": true,                            /* 유형 검사 오류 발생시, 파일 내보내기 비활성화. */
    // "preserveConstEnums": true,                       /* Disable erasing 'const enum' declarations in generated code. */
     /* tsc --init 기본항목에 불포함. 인위적으로 추가됨 */
//     "pretty": true,
    // "declarationDir": "./",                           /* Specify the output directory for generated declaration files. */
    // "preserveValueImports": true,                     /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */

    /* Interop Constraints */
    // "isolatedModules": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */
     /* 이전 버전과의 호환성을 제공하기 위해 Node.js를 사용하면
      기본 가져오기로 대부분의 CommonJS 패키지를 가져올 수 있습니다.
      이 플래그는 TypeScript에 CommonJS 모듈에서 import를 사용해도 괜찮다는 것을 알려줍니다 */
//     "allowSyntheticDefaultImports": true,             /* 모듈에 기본 내보내기가 없는 경우 'y에서 x 가져오기'를 허용합니다. */
    "esModuleInterop": true,                             /* '*' 미사용시에도 import 가능하도록 설정  */
    // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
    "forceConsistentCasingInFileNames": true,            /* import 문에서 casing 이 올바른지 확인. */

    /* Type Checking */
    "strict": true,                                      /* Enable all strict type-checking options. */
    // "noImplicitAny": true,                            /* Enable error reporting for expressions and declarations with an implied 'any' type. */
    // "strictNullChecks": true,                         /* When type checking, take into account 'null' and 'undefined'. */
    // "strictFunctionTypes": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
    // "strictBindCallApply": true,                      /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */
    // "strictPropertyInitialization": true,             /* Check for class properties that are declared but not set in the constructor. */
    // "noImplicitThis": true,                           /* Enable error reporting when 'this' is given the type 'any'. */
    // "useUnknownInCatchVariables": true,               /* Default catch clause variables as 'unknown' instead of 'any'. */
    // "alwaysStrict": true,                             /* Ensure 'use strict' is always emitted. */
//     "noUnusedLocals": true,                           /* Enable error reporting when local variables aren't read. */
//     "noUnusedParameters": true,                       /* 함수 매개변수를 사용하지 않으면 오류발생. */
    // "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
//     "noImplicitReturns": true,                        /* 함수에서 명시적 반환타입 미선언 시 오류 활성화. */
//     "noFallthroughCasesInSwitch": true,               /* switch 문의 fallthrough 케이스에 대한 오류 활성화. */
//     "noUncheckedIndexedAccess": true,                 /* 객체 맵형태 인덱스접근 시, 판단 유형에 'undefined' 추가 */
//     "noImplicitOverride": true,                       /* 파생 클래스의 재정의 멤버가 재정의 한정자로 표시되는지 확인. */
//     "noPropertyAccessFromIndexSignature": true,       /* 인덱싱 시그니쳐를 통해 선언된 키에 대해 인덱싱되도록 적용. */
    // "allowUnusedLabels": true,                        /* Disable error reporting for unused labels. */
    // "allowUnreachableCode": true,                     /* Disable error reporting for unreachable code. */

    /* Completeness */
    // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
    "skipLibCheck": true                                 /* 모든 .d.ts 파일 유형 검사를 건너뜁니다. */
  }
}
